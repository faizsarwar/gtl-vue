{"ast":null,"code":"'use strict';\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nclass HttpClient {\n  /** The client name used for diagnostics. */\n  getClientName() {\n    throw new Error('getClientName not implemented.');\n  }\n\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    throw new Error('makeRequest not implemented.');\n  }\n  /** Helper to make a consistent timeout error across implementations. */\n\n\n  static makeTimeoutError() {\n    const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n    timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n    return timeoutErr;\n  }\n\n}\n\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\n\nclass HttpClientResponse {\n  constructor(statusCode, headers) {\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n\n  getStatusCode() {\n    return this._statusCode;\n  }\n\n  getHeaders() {\n    return this._headers;\n  }\n\n  getRawResponse() {\n    throw new Error('getRawResponse not implemented.');\n  }\n\n  toStream(streamCompleteCallback) {\n    throw new Error('toStream not implemented.');\n  }\n\n  toJSON() {\n    throw new Error('toJSON not implemented.');\n  }\n\n}\n\nmodule.exports = {\n  HttpClient,\n  HttpClientResponse\n};","map":{"version":3,"names":["HttpClient","getClientName","Error","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","makeTimeoutError","timeoutErr","TypeError","TIMEOUT_ERROR_CODE","code","CONNECTION_CLOSED_ERROR_CODES","HttpClientResponse","constructor","statusCode","_statusCode","_headers","getStatusCode","getHeaders","getRawResponse","toStream","streamCompleteCallback","toJSON","module","exports"],"sources":["/home/faiz/Anas-Defy/glass-vue/node_modules/stripe/lib/net/HttpClient.js"],"sourcesContent":["'use strict';\n\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nclass HttpClient {\n  /** The client name used for diagnostics. */\n  getClientName() {\n    throw new Error('getClientName not implemented.');\n  }\n\n  makeRequest(\n    host,\n    port,\n    path,\n    method,\n    headers,\n    requestData,\n    protocol,\n    timeout\n  ) {\n    throw new Error('makeRequest not implemented.');\n  }\n\n  /** Helper to make a consistent timeout error across implementations. */\n  static makeTimeoutError() {\n    const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n    timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n    return timeoutErr;\n  }\n}\n\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\n\nclass HttpClientResponse {\n  constructor(statusCode, headers) {\n    this._statusCode = statusCode;\n    this._headers = headers;\n  }\n\n  getStatusCode() {\n    return this._statusCode;\n  }\n\n  getHeaders() {\n    return this._headers;\n  }\n\n  getRawResponse() {\n    throw new Error('getRawResponse not implemented.');\n  }\n\n  toStream(streamCompleteCallback) {\n    throw new Error('toStream not implemented.');\n  }\n\n  toJSON() {\n    throw new Error('toJSON not implemented.');\n  }\n}\n\nmodule.exports = {HttpClient, HttpClientResponse};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMA,UAAN,CAAiB;EACf;EACAC,aAAa,GAAG;IACd,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDC,WAAW,CACTC,IADS,EAETC,IAFS,EAGTC,IAHS,EAITC,MAJS,EAKTC,OALS,EAMTC,WANS,EAOTC,QAPS,EAQTC,OARS,EAST;IACA,MAAM,IAAIT,KAAJ,CAAU,8BAAV,CAAN;EACD;EAED;;;EACuB,OAAhBU,gBAAgB,GAAG;IACxB,MAAMC,UAAU,GAAG,IAAIC,SAAJ,CAAcd,UAAU,CAACe,kBAAzB,CAAnB;IACAF,UAAU,CAACG,IAAX,GAAkBhB,UAAU,CAACe,kBAA7B;IACA,OAAOF,UAAP;EACD;;AAxBc;;AA2BjBb,UAAU,CAACiB,6BAAX,GAA2C,CAAC,YAAD,EAAe,OAAf,CAA3C;AACAjB,UAAU,CAACe,kBAAX,GAAgC,WAAhC;;AAEA,MAAMG,kBAAN,CAAyB;EACvBC,WAAW,CAACC,UAAD,EAAaZ,OAAb,EAAsB;IAC/B,KAAKa,WAAL,GAAmBD,UAAnB;IACA,KAAKE,QAAL,GAAgBd,OAAhB;EACD;;EAEDe,aAAa,GAAG;IACd,OAAO,KAAKF,WAAZ;EACD;;EAEDG,UAAU,GAAG;IACX,OAAO,KAAKF,QAAZ;EACD;;EAEDG,cAAc,GAAG;IACf,MAAM,IAAIvB,KAAJ,CAAU,iCAAV,CAAN;EACD;;EAEDwB,QAAQ,CAACC,sBAAD,EAAyB;IAC/B,MAAM,IAAIzB,KAAJ,CAAU,2BAAV,CAAN;EACD;;EAED0B,MAAM,GAAG;IACP,MAAM,IAAI1B,KAAJ,CAAU,yBAAV,CAAN;EACD;;AAxBsB;;AA2BzB2B,MAAM,CAACC,OAAP,GAAiB;EAAC9B,UAAD;EAAakB;AAAb,CAAjB"},"metadata":{},"sourceType":"script"}